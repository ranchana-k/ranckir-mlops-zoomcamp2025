x-airflow-common:
  &airflow-common
  build:
    context: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: http://airflow-api:8080/execution/
    MLFLOW_ARTIFACT_LOCATION: /app/mlflow/mlruns
    MLFLOW_TRACKING_URI: http://mlflow-ui:5000 
  user: "50000:0"
  volumes:
    - ./airflow_db:/opt/airflow
    - ./airflow_db/dags:/opt/airflow/dags 
    - ./airflow_db/logs:/opt/airflow/logs
    - ./airflow_db/config:/opt/airflow/config
    - ./airflow_db/plugins:/opt/airflow/plugins
    - ./mlflow:/app/mlflow 

  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy
   

services:
  postgres:
    image: postgres:13
    container_name: airflow_postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - "5432:5432" # สามารถเข้าถึง postgres จากโฮสต์ได้ที่ port 5432
    volumes:
      - ./pg_data:/var/lib/postgresql/data # สำหรับเก็บข้อมูล Database (จะถูกสร้างถ้าไม่มี)
    healthcheck: # Healthcheck เพื่อให้ service อื่นรอจน Database พร้อมใช้งาน
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    command:
      - -c
      - |
        echo "Running Airflow DB migration..."
        # รันคำสั่ง Airflow CLI โดยตรง
        airflow db migrate

        echo "Creating initial Airflow webserver user..."
        # รันคำสั่ง Airflow CLI โดยตรง
        airflow users create \
            --username "${_AIRFLOW_WWW_USER_USERNAME:-airflow}" \
            --password "${_AIRFLOW_WWW_USER_PASSWORD:-airflow}" \
            --firstname Airflow \
            --lastname Admin \
            --role Admin \
            --email admin@example.com || true

        echo "Airflow initialization complete."

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"


  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: airflow-worker
    deploy: # <--- ADD THIS BLOCK
      resources:
        limits:
          memory: 8G # <--- Start with 4GB. You might need 6G, 8G, or even more depending on your data size.
        reservations: # Recommended to reserve some memory to ensure it's available
          memory: 4G
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
  

  airflow-api:
    <<: *airflow-common
    container_name: airflow-api
    ports:
      - "8080:8080"
    command: airflow api-server
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: airflow scheduler
    
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$(hostname)\""]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-dag-processor:
    <<: *airflow-common
    container_name: airflow-dag-processor
    command: airflow dag-processor
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    command: airflow triggerer
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  mlflow-ui:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-ui
    working_dir: /app/mlflow
    volumes:
      - ./mlflow:/app/mlflow
    ports:
      - "5000:5000"



